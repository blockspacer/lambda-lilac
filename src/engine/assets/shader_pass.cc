#include "assets/asset_handle.h"
#include "containers/containers.h"
#include <memory/memory.h>
#include "utils/bitset.h"
#include "shader_pass.h"

namespace lambda
{
  namespace asset
  {
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VioletShaderPassHandle VioletShaderPassManager::create(Name name)
    {
      return VioletShaderPassHandle(foundation::Memory::construct<VioletShaderPass>(), name);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void VioletShaderPassManager::destroy(VioletShaderPassHandle shader_pass)
    {
      foundation::Memory::destruct<VioletShaderPass>(shader_pass.get());
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void VioletShaderPass::addProgram(VioletShaderProgramHandle program)
    {
      programs_.push_back(program);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void VioletShaderPass::addInput(VioletTextureHandle input)
    {
      inputs_.push_back(input);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void VioletShaderPass::addOutput(VioletTextureHandle output)
    {
      outputs_.push_back(output);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Vector<VioletShaderProgramHandle> VioletShaderPass::getPrograms()
    {
      return programs_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Vector<VioletTextureHandle> VioletShaderPass::getInputs()
    {
      return inputs_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Vector<VioletTextureHandle> VioletShaderPass::getOutputs()
    {
      return outputs_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const Vector<VioletShaderProgramHandle>& VioletShaderPass::getPrograms() const
    {
      return programs_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const Vector<VioletTextureHandle>& VioletShaderPass::getInputs() const
    {
      return inputs_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const Vector<VioletTextureHandle>& VioletShaderPass::getOutputs() const
    {
      return outputs_;
    }
  }
}
