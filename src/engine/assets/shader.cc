#include "shader.h"
#include "renderers/d3d11/d3d11_default_shader.h"

namespace lambda
{
  namespace asset
  {
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Shader::Shader() :
      Shader(Name("Default"), Vector<char>(kDefaultShader, kDefaultShader + sizeof(kDefaultShader)))
    {
    }
   
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Shader::Shader(const Name& file, const Vector<char>& shader_bytecode) :
      shader_bytecode_(shader_bytecode)
      , file_(file)
    {
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Shader::~Shader()
    {
      shader_bytecode_.resize(0u);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void Shader::setShaderVariable(const platform::ShaderVariable& variable)
    {
      queued_shader_variables_.push_back(variable);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Vector<char> Shader::getBytecode() const
    {
      return shader_bytecode_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Name Shader::getFile() const
    {
      return file_;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void Shader::clear()
    {
      shader_bytecode_.resize(0u);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Vector<platform::ShaderVariable> Shader::getQueuedShaderVariables()
    {
      return eastl::move(queued_shader_variables_);
    }
  }
}