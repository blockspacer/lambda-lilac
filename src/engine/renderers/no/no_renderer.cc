#include "no_renderer.h"

namespace lambda
{
  namespace windows
  {
    ///////////////////////////////////////////////////////////////////////////
    NoRenderer::~NoRenderer()
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::initialize(world::IWorld* world)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::deinitialize()
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setWindow(
      foundation::SharedPointer<platform::IWindow> window)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::resize()
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::update(const double& delta_time)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::startFrame()
    {
    }
   
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::endFrame(bool display)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::draw()
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::drawInstanced(const Vector<glm::mat4>& matrices)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setRasterizerState(
      const platform::RasterizerState& rasterizer_state)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setBlendState(const platform::BlendState& blend_state)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setDepthStencilState(
      const platform::DepthStencilState& depth_stencil_state)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setSamplerState(
      const platform::SamplerState& sampler_state, 
      unsigned char slot)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::generateMipMaps(const asset::VioletTextureHandle& texture)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::copyToScreen(const asset::VioletTextureHandle& texture)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::bindShaderPass(const platform::ShaderPass& shader_pass)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::clearRenderTarget(
      asset::VioletTextureHandle texture, 
      const glm::vec4& colour)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setScissorRect(const glm::vec4& rect)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setViewports(const Vector<glm::vec4>& rects)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setMesh(asset::MeshHandle mesh)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setSubMesh(const uint32_t& sub_mesh_idx)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setShader(asset::ShaderHandle shader)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setTexture(
      asset::VioletTextureHandle texture, 
      uint8_t slot)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::pushMarker(const String& name)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setMarker(const String& name)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::popMarker()
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::beginTimer(const String& name)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::endTimer(const String& name)
    {
    }
    
    ///////////////////////////////////////////////////////////////////////////
    uint64_t NoRenderer::getTimerMicroSeconds(const String& name)
    {
      return 0ul;
    }
    
    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setShaderVariable(
      const platform::ShaderVariable& variable)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setRenderScale(const float & render_scale)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::destroyAsset(
      foundation::SharedPointer<asset::IAsset> asset)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    void NoRenderer::setVSync(bool vsync)
    {
    }

    ///////////////////////////////////////////////////////////////////////////
    float NoRenderer::getRenderScale()
    {
      return 1.0f;
    }

    ///////////////////////////////////////////////////////////////////////////
    bool NoRenderer::getVSync() const
    {
      return false;
    }
  }
}